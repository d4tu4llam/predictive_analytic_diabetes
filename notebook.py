# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7oAygM0dxv5td0B3j47_ljTBlWSpd3n

# Predictive Analytic:  Diabetes
- **Nama:** HILMI DATU ALLAM
- **Email:** hilmi.allam@gmail.com
- **ID Dicoding:** datuallam

- **Dataset:** https://www.kaggle.com/datasets/iammustafatz/diabetes-prediction-dataset

# Domain Proyek
Diabetes adalah penyakit kronis yang terjadi ketika pankreas tidak memproduksi cukup insulin atau ketika tubuh tidak dapat menggunakan insulin secara efektif dan menyebabkan tingginya tingkat gula dalam darah. Pada tahun 2021, diabetes adalah penyebab langsung dari 1.6 juta kematian [1]. Di Indonesia, prevalensi diabetes pada penduduk diatas 15 tahun mencapai 2% atau sekitar 5,7 juta orang [2]. Diabetes memiliki hubungan erat dengan kadar gula darah, di mana kekurangan insulin menyebabkan peningkatan kadar glukosa darah [3]. Obesitas juga merupakan faktor risiko utama, karena dapat menyebabkan resistensi insulin yang memicu diabetes tipe 2 [4]. Selain itu, variabel seperti usia, jenis kelamin, hipertensi, penyakit jantung, riwayat merokok, BMI, kadar HbA1c, dan kadar glukosa darah telah terbukti relevan dalam penelitian diabetes, terutama dalam analitik prediktif untuk mendeteksi risiko dan diagnosis dini [3]. Meningkatnya prevalensi diabetes dan dampaknya terhadap kesehatan masyarakat menunjukkan perlunya pendekatan prediktif berbasis data untuk mengidentifikasi faktor risiko utama dan mendeteksi diabetes secara dini.

# Business Understanding

## Problem Statements

Rumusan masalah dari masalah latar belakang diatas adalah
  1. Dari berbagai faktor, faktor mana yang merupakan faktor utama terkena diabetes?
  2. Bagaimana cara mendeteksi seseorang memiliki diabetes berdasarkan data rekam medis menggunakan pendekatan analitik prediktif?
  3. Bagaimana akurasi model prediktif dapat ditingkatkan untuk mendeteksi diabetes secara dini ?

## GOALS

Berdasarkan problem statements, berikut tujuan dibuatnya proyek ini.
  1. Mengetahui faktor-faktor yang paling berpengaruh terhadap risiko diabetes berdasarkan analisis data seperti usia, jenis kelamin, hipertensi, penyakit jantung, riwayat merokok, BMI, kadar HbA1c, dan kadar glukosa darah.
  2. Menggunakan algoritma machine learning untuk mendeteksi diabetes menggunakan data rekam medis.
  3. Menemukan model terbaik berdasarkan akurasi dan recall tertinggi untuk memprediksi diabetes pada pasien

## Solution Statements

1. Analisis data untuk memahami fitur-fitur yang mempengaruhi orang terkena diabetes, dengan deskripsi statistik data untuk mengetahui korelasi antar fitur dan menerapkan teknik visualisasi data untuk memahami hubungan antara data target dan fitur lainnya.
2. Menggunakan 3 algoritma machine learning yang berbeda, yaitu Random Forest, Logistic Regression dan K-Nearest Neighbor.
3. Menggunakan confusion matrix dan recall score pada masing-masing model machine learning untuk menemukan model terbaik berdasarkan akurasi tertinggi.

## Metrik

Metrik yang akan digunakan untuk mengevaluasi seberapa baik model klasifikasi adalah confusion matrix. Confusion matrix dapat digunakan untuk menghitung akurasi dan recall.

# Data Understanding

tahap dalam proses analisis data yang bertujuan untuk memahami dataset secara mendalam sebelum melakukan analisis lebih lanjut.

## 1. Mengimport Library

Pada bagian ini kita mengimport seluruh library yang diperlukan untuk menganalisis
"""

!pip install kaggle

!pip install google-colab

from google.colab import files
import os
import shutil
import textwrap
import numpy as np
import zipfile
import math
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, train_test_split
from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, OneHotEncoder
from sklearn.metrics import ConfusionMatrixDisplay, accuracy_score, classification_report, precision_score, recall_score, f1_score
from imblearn.over_sampling import SMOTE

"""## Data Loading

tahap untuk memuat dataset yang akan digunakan agar dataset lebih mudah dipahami.
"""

files.upload()

# Buat folder .kaggle jika belum ada
os.makedirs('/root/.kaggle', exist_ok=True)

# Pindahkan file ke folder .kaggle
shutil.move('kaggle.json', '/root/.kaggle/kaggle.json')

# Ubah izin file agar hanya bisa diakses oleh owner
os.chmod('/root/.kaggle/kaggle.json', 600)

!kaggle datasets download -d iammustafatz/diabetes-prediction-dataset
#membuka zip menjadi folder
with zipfile.ZipFile("diabetes-prediction-dataset.zip", "r") as zip_ref:
    zip_ref.extractall("dataset")

#membaca csv dalam folder
data = pd.read_csv("dataset/diabetes_prediction_dataset.csv",sep=",")

# Display the first few rows
data.head()

"""### Deskripsi Variabel

Variabel | Keterangan
----------|----------
gender| jenis kelamin
age |  umur dalam decimal
hypertension| 0: tidak hipertensi, 1: hipertensi
heart_disease| 0: tidak ada penyakit jantung, 1: penyakit jantung
smoking_history|6 kategori: not current (tidak merokok saat ini), former (mantan perokok), No Info (tidak ada informasi), current (merokok saat ini), never (tidak pernah merokok), dan ever (pernah merokok).
bmi | ukuran lemak tubuh berdasarkan berat dan tinggi. Rentang BMI dalam dataset adalah 10,16 hingga 71,55.
HbA1c_level| ukuran rata-rata kadar gula darah seseorang selama 2-3 bulan terakhir.
blood_glucose_level | Jumlah glukosa dalam aliran darah pada waktu tertentu.
diabetes | 0: tidak diabetes, 1: diabetes
"""

data.info()

"""Terdapat 2 variabel bertipe string, 3 variabel bertipe float64 dan 4 variabel bertipe int64"""

data['age'] = np.where(data['age'] < 1, np.ceil(data['age']), data['age'].round()).astype(int)

"""Data age diubah dari desimal menjadi integer dengan umur yang dibawah 1 tahun dianggap 1 tahun agar tidak ada yang memiliki umur 0. Hal ini dapat mempermudah analisis kedepannya"""

data.shape

"""Dari code diatas didapat :

| Jumlah Baris | Jumlah Kolom |
--------|-------
| 70000 | 12 |
"""

df = pd.DataFrame(data)

"""### Deskripsi Statistik dari Data"""

df.describe()

"""Fungsi `describe()` memberikan informasi statistik pada masing-masing kolom, antara lain:

- Count : Jumlah sampel pada data.
- Mean : Nilai rata-rata.
- Std : Standar deviasi.
- Min : nilai minimum setiap kolom.
- 25% : Kuartil pertama adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama.
- 50% : Kuartil kedua, atau biasa juga disebut median (nilai tengah).
- 75% : Kuartil ketiga.
- Max : Nilai maksimum.

Dari informasi diatas, disimpulkan bahwa data ini mencakup orang yang berumu 1-80 tahun dengan BMI rentang 10-95. Kadar gula di aliran darah 2-3 bulan terakhir (HbA1c_level) responden berada di kisaran 3.5 hingga 9 persen, sedangkan kadar gula di aliran saat data ini diambil berada pada kisaran 80 hingga 300 mg/dL

## Exploratory Data Analysis

### Univariate Analysis
"""

fitur_numerik=['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']
fitur_kategorikal=['gender', 'smoking_history', 'hypertension', 'heart_disease', 'diabetes']

count = df[fitur_kategorikal].value_counts()

jumlah_unik =df[fitur_kategorikal].nunique()
nilai_unik = df[fitur_kategorikal].apply(lambda col: col.unique())
pd.DataFrame({
    'Jumlah Unik': jumlah_unik,
    'Nilai Unik': nilai_unik
})

# Membentuk plot dengan subplot sejumlah 6 berukuran 3 x 2
fig, axes = plt.subplots(3, 2, figsize = (17, 17))

# Mengubah array multi dimensi menjadi array 1 dimensi
axes = axes.flatten()

# Mendeskripsikan kolom-kolom kategorikal yang akan digunakan
deskripsi_kolom_kategorikal = ["Jenis Kelamin (Female, Male Other)",
                                "Smoking History",
                                "Hipertensi (0: Tidak Hipertensi, 1: Hipertensi)",
                                "Penyakit Jantung(0: Tidak sakit jantung, 1: sakit jantung)",
                                "Diabetes (0: Tidak diabetes, 1: diabetes)"
]

# Membentuk plot jumlah dalam bentuk bar plot untuk masing-masing kolom
for i, kolom in enumerate(df[fitur_kategorikal].columns):
    sns.countplot(x = kolom, data = data, ax = axes[i], hue = kolom)

    # Menambahkan judul untuk masing-masing plot
    judul = "\n".join(textwrap.wrap(f"{deskripsi_kolom_kategorikal[i]}", width = 40))
    axes[i].set_title(judul)
    axes[i].title.set_size(14)

    # Mengatur label x
    axes[i].tick_params(axis = "x", labelrotation = 90)
    axes[i].tick_params(axis = "both", which = "major", labelsize = 12)
    axes[i].set_xlabel("")

# Mengatur susunan agar tidak berhimpitan
plt.tight_layout()

# Menampilkan plot
plt.show()

"""Dari plot-plot diatas didapat informasi:
  1. Dari Plot Gender, responden mayoritas perempuan dengan sangat sedikit yang menolak menjawab yaitu other
  2. Dari plot Smoking History, mayoritas responden tidak pernah merokok dan no info.
  3. Dari plot Hipertensi, mayoritas tidak hipertensi
  4. Dari plot Penyakit Jantung, mayoritas tidak sakit jantung
  5. Dari plot Diabetes, mayoritas tidak diabetes

  Beberapa kelas sangat imbalance, nantinya akan dilakukan oversampling sebelum training
  Untuk kedepannya gender "Other" akan di drop karena hanya berjumlah sangat sedikit.
"""

df = df[df['gender'] != 'Other']

"""Kode ini akan ngedrop semua baris dengan gender Other"""

df.hist(bins=50, figsize=(20,15), color= 'skyblue')

# Mengatur susunan agar tidak berhimpitan
plt.tight_layout()

#menampilkan plot
plt.show()

skewness = df.skew(numeric_only=True)

summary = pd.DataFrame({
    'Skewness': skewness,
    'Kategori': skewness.apply(lambda x:
        'Miring Kiri' if x < -0.5 else
        'Miring Kanan' if x > 0.5 else
        'Cukup Normal')
})

print(summary)

"""Dari Gambar maupun output diatas didapat informasi:
1. Plot Histogram dari **HbA1c_level** dan **Age* berdistribusi cukup normal
2. Plot Histogram dari **Hypertension**, **heart_disease**, **bmi**, **blood_glucose_level** dan **diabetes** berdistribusi miring ke kanan (right skewed)

### Multivariate Analysis

####Membandingkan diabetes dengan gender
"""

sns.countplot(data=df, x='diabetes', hue='gender')
plt.title('Distribusi Diabetes berdasarkan Gender')
plt.show()

"""Dari Plot diatas didapat informasi:
1. Jumlah perempuan tanpa diabetes jauh lebih banyak daripada laki-laki tanpa diabetes.
2. Jumlah perempuan dengan diabetes hampir sama dengan jumlah laki-laki dengan diabetes.

####Membandingkan diabetes dengan usia
"""

plt.figure(figsize=(10, 6))
df_strip = df.copy()
df_strip['diabetes']=df['diabetes'].apply(lambda x: 'Diabetes' if x==1 else 'Non-Diabetes')
sns.stripplot(data=df_strip, x="age", y="diabetes", jitter=0.3, alpha=0.5, palette="Set2")

plt.title("Distribusi Usia Berdasarkan Kondisi Diabetes")
plt.xlabel("Usia (tahun)")
plt.ylabel("Kondisi Diabetes")
plt.grid(True, axis='x', linestyle='--', alpha=0.3)
plt.tight_layout()
plt.show()

"""Dari gambar diatas:
1. Seluruh responden non diabates direntang 1-80
2. Seluruh responden diabetes mulai banyak frekuensinya pada umur 20-80. Dengan beberapa outlier di rentang 1-29

#### Membandingkan diabetes dengan tingkat kadar gula saat ini
"""

sns.boxplot(x='diabetes', y='blood_glucose_level', data=df)
plt.title('Blood Glucose Level vs Diabetes')
plt.show()

"""Dari boxplot diatas:
1. Pasien dengan diabetes memiliki median level glukosa darah yang lebih tinggi dibandingkan pasien tanpa diabetes.
2. Distribusi glukosa pada penderita diabetes lebih melebar dan mencakup nilai yang lebih tinggi hingga 300.
3. Ppasien tanpa diabetes memiliki glukosa darah yang lebih terkonsentrasi di bawah 200.

#### Membandingkan diabetes dengan HbA1c_level (tingkat gula dalam darah 2-3 bulan terakhir)
"""

sns.boxplot(x='diabetes', y='HbA1c_level', data=df)
plt.title('Hb1Ac Level vs Diabetes')
plt.show()

"""Dari boxplot diatas:
1. Penderita diabetes memiliki HbA1c yang lebih tinggi dibandingkan non-diabetes.

2. Median HbA1c penderita diabetes sekitar 6.5–7.5, sedangkan non-diabetesi sekitar 5.5–6.

3. Hampir seluruh penderita diabetes memiliki HbA1c di atas 6

####Membuat Correlation Matrix
"""

data

# Pengelompokan smoking_history
df['smoking_history'] = df['smoking_history'].replace({
    'former': 'past_smoker', 'current': 'smoker', 'current_smoker': 'past_smoker', 'not current': 'past_smoker',
    'never': 'non_smoker', 'No Info': 'non_smoker'
})
df_encoded = pd.get_dummies(df, columns=['gender', 'smoking_history'], drop_first=True)

# Graph I: Correlation Matrix Heatmap
plt.figure(figsize=(15, 10))
correlation_matrix = df_encoded.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, fmt='.2f')
plt.title("Correlation Matrix Heatmap")
plt.show()

# Graph II: Correlation with 'diabetes' (target variable)
corr = df_encoded.corr()
target_corr = corr['diabetes'].drop('diabetes')
target_corr_sorted = target_corr.sort_values(ascending=False)

"""Dari Correlation Matrix diatas:
1. Diabetes memiliki korelasi tinggi dengan blood_glucose_level dan HbA1c_level. Hal ini menunjukkan 2 variabel ini merupakan prediktor yang kuat
2. age, bmi, hypertension dan heart_disease memiliki korelasi positif yang lumayan. Hal ini menandakan bahwa usia yang lebih tua, indeks masa tubuh yang tinggi, hipertensi dan penyakit jantung berkontribusi pada diabetes.

# Data Preparation

## Data Cleaning

Menangani Data Duplikat
"""

df.duplicated().sum()

df_clean=df.drop_duplicates()

"""Terdapat 6001 data duplikat, kemudian kita menghapusnya dengan .drop_duplicates()

Menangani Missing Value
"""

df_clean.isnull().sum()

"""Tidak terdapat missing value pada dataset kita

Menangani Value 0
"""

column_names = ['gender','age','smoking_history','bmi','HbA1c_level','blood_glucose_level']
for x in column_names:
  print(x, (df_clean[x]==0).sum())

"""Setelah di cek. Tidak ada value 0 pada kolom numerik kita. Value 0 pada diabetes, hypertension dan heart_disease itu wajar karena mereka kategorikal

##Encode Kolom kategorikal dan One Hot Encoding

Encoding dilakukan terhadap smoking_history dan one hot encoding dilakukan terhadap gender
"""

le = LabelEncoder()
df_clean = pd.get_dummies(df_clean,columns=['smoking_history'],drop_first=True)
df_clean['gender']= le.fit_transform(df_clean['gender'])

df_clean.head()

"""## Split Train Test

Selanjutnya, karena target kita adalah variabel **diabetes** maka kita akan membuang kolom tersebut dari data dan assign kolom tersebut ke variabel baru.
"""

X = df_clean.drop('diabetes',axis=1)
y = df_clean['diabetes']
# Membentuk data training dan data testing dengan komposisi 80% : 20 % dan dirandom setiap dijalankan ulang
X_train,X_test,y_train,y_test = train_test_split(X,y, test_size = 0.2, random_state=22)

"""Lalu, kita membagi data menjadi 2, yaitu
* Data training sebesar 80% untuk melatih model
* Data testing sebesar 20% untuk menguji model
"""

print("Ukuran X_train: ", X_train.shape)
print("Ukuran X_test: ", X_test.shape)
print("Ukuran y_train: ", y_train.shape)
print("Ukuran y_test: ", y_test.shape)

"""##Oversampling

Karena data mengalami imbalance yang sangat tumpang tindih maka perlu dilakukan oversamplnig
"""

smote = SMOTE(random_state=42)
X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

print("Ukuran X_train_balanced: ", X_train_balanced.shape)
print("Ukuran y_train_balanced: ", y_train_balanced.shape)

y_train.value_counts()

y_train_balanced.value_counts()

"""Sekarang data sudah seimbang

##Standardisasi
"""

# scaling untuk data training
numerical_features= ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level','hypertension','heart_disease']
scaler = StandardScaler()
scaler.fit(X_train_balanced[numerical_features])
X_train_balanced[numerical_features] = scaler.transform(X_train_balanced.loc[:, numerical_features])
X_train_balanced[numerical_features].head()

"""Scaler di fit menggunakan data train. data train di standardisasi menggunakan scaler yang di fit tadi"""

X_test[numerical_features] = scaler.transform(X_test.loc[:, numerical_features])
X_test[numerical_features].head()

"""Data testing di transform menggunakan scaler yang di fit menggunakan data training agar menghindari data leakage

#Model
"""

def evaluasi_model(y_true, y_pred, title):
    # Daftar label kelas
    target_nama = ['Non Diabetes', 'Diabetes']

    # Menampilkan laporan klasifikasi
    print("=== Classification Report ===")
    print(classification_report(y_true, y_pred, target_names=target_nama))

    # Menampilkan akurasi
    acc = accuracy_score(y_true, y_pred)
    print(f"=== Accuracy: {acc:.4f} ===")

    # Menampilkan confusion matrix
    fig, ax = plt.subplots(figsize=(10, 5))
    ConfusionMatrixDisplay.from_predictions(y_true, y_pred, ax=ax)

    # Atur label sumbu
    ax.xaxis.set_ticklabels(target_nama, rotation=90)
    ax.yaxis.set_ticklabels(target_nama)

    # Hilangkan grid
    ax.grid(False)

    # Tambahkan judul
    ax.set_title(title)
    plt.show()

"""Logistic Regression"""

model = LogisticRegression(solver='liblinear',random_state=50)
model.fit(X_train_balanced,y_train_balanced)

y_pred_lr = model.predict(X_test)
evaluasi_model(y_test, y_pred_lr, 'Logistic Regression')

"""Menggunakan Logistic Regression :

1. 15590 responden nondiabetes telah diklasifikasikan dengan benar
2. 1364 responden diabetes telah diklasifikasikan dengan benar
3. 1518 responden nondiabetes diklasifikasikan sebagai responden diabetes (False Positif)
4. 325 responden diabetes diklasifikasikan sebagai responden nondiabetes (False negatif)

KNN
"""

knn = KNeighborsClassifier(n_neighbors=21)
knn.fit(X_train_balanced,y_train_balanced)

y_pred_knn = knn.predict(X_test)
evaluasi_model(y_test, y_pred_knn, 'KNN')

"""Menggunakan K-Nearest Neighbor :

1. 15981 responden nondiabetes telah diklasifikasikan dengan benar
2. 1329 responden diabetes telah diklasifikasikan dengan benar
3. 1127 responden nondiabetes diklasifikasikan sebagai responden diabetes (False Positif)
4. 360 responden diabetes diklasifikasikan sebagai responden nondiabetes (False negatif)

Random Forest
"""

rf= RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train_balanced,y_train_balanced)

y_pred_rf=rf.predict(X_test)
evaluasi_model(y_test, y_pred_rf, 'Random Forest')

"""Menggunakan Random Forest :

1. 16791 responden nondiabetes telah diklasifikasikan dengan benar
2. 1227 responden diabetes telah diklasifikasikan dengan benar
3. 317 responden nondiabetes diklasifikasikan sebagai responden diabetes (False Positif)
4. 462 responden diabetes diklasifikasikan sebagai responden nondiabetes (False negatif)

Tingkat Penting Fitur
"""

feature_importance = pd.DataFrame({
    'Feature': X_train_balanced.columns,
    'Importance': rf.feature_importances_
}).sort_values(by='Importance', ascending=False)

print("\nFeature Importance:")
print(feature_importance)

plt.figure(figsize=(10, 6))
plt.bar(feature_importance['Feature'], feature_importance['Importance'])
plt.xticks(rotation=45, ha='right')
plt.title('Feature Importance in Diabetes Prediction')
plt.xlabel('Features')
plt.ylabel('Importance Score')
plt.tight_layout()
plt.show()

"""Fitur paling penting menurut random forest adalah HbA1c_level yaitu tingkat gula dalam darah 2-3 bulan terakhir

# Referensi

[1] World Health Organization. (2021). Diabetes Fact Sheet. https://www.who.int/news-room/fact-sheets/detail/diabetes

[2] Kementerian Kesehatan Republik Indonesia. (2018). Riset Kesehatan Dasar (Riskesdas) 2018. Jakarta: Badan Penelitian dan Pengembangan Kesehatan.

[3] Kavakiotis, I., et al. (2017). Machine Learning and Data Mining Methods in Diabetes Research. Computational and Structural Biotechnology Journal, 15, 104-116.

[4] Abdullah, A., Peeters, A., de Courten, M., & Stoelwinder, J. (2010). The magnitude of association between overweight and obesity and the risk of diabetes: a meta-analysis of prospective cohort studies. Diabetes research and clinical practice, 89(3), 309-319.
"""